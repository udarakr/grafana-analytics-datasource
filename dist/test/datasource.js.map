{"version":3,"sources":["../../src/datasource.js"],"names":["TableModel","AnalyticsDatasource","instanceSettings","$q","backendSrv","type","url","name","q","options","opts","angular","copy","query","buildQueryParameters","targets","length","when","all","map","buildSeries","target","then","results","datasourceRequest","method","response","status","message","title","getTables","filter","metric","resp","data","v","a","b","c","console","error","table","keys","Object","values","columns","i","push","self","default","rows","getTableData","buildCoulmns","row","branch","forEach","r","k"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport * as TableModel from 'app/core/table_model';\n\nexport class AnalyticsDatasource {\n\n    constructor(instanceSettings, $q, backendSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n\n        this.q = $q;\n        this.backendSrv = backendSrv;\n    }\n\n    query(options) {\n        let opts = angular.copy(options);\n        let query = this.buildQueryParameters(opts);\n\n        if (query.targets.length <= 0) {\n            return this.q.when([]);\n        }\n\n        return this.q.all(_.map(query.targets, target => {\n            return this.buildSeries(target);\n        })).then(results => {\n            return {'data': results} \n        });;\n\n    }\n\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + \"/tables\",\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Analytics Data source is working\", title: \"Success\" };\n            }\n        });\n    }\n\n    metricFindQuery(options) {\n        if(options.query === 'table'){\n            return this.getTables(options.target);\n        }else if(options.query === 'metric'){\n                return this.q.when([\n                    {'text': 'select*'}\n                ]);\n        }\n\n        return this.q.when([]);\n    }\n\n    buildQueryParameters(options) {\n        options.targets = _.filter(options.targets, target => {\n            return target.metric;\n        });\n\n        return options;\n    }\n\n    getTables(target) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/tables',\n            method: 'GET'\n        }).then(function(resp){\n            return _.map(resp.data, function(v){\n                return {'text': v}\n            });\n        }, function(resp, a,b,c){\n            console.error(resp, a,b,c)\n        });\n    }\n\n    getTableData(target) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/tables/' + target.table,\n            method: 'GET'\n        });\n    }\n\n    getSchema(target) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/tables/' + target.table + \"/schema\",\n            method: 'GET'\n        }).then(function(resp){\n            return resp.data;\n        }, function(resp, a,b,c){\n            console.error(resp, a,b,c)\n        });\n    }\n\n    buildCoulmns(resp, table){\n        var keys = Object.keys(resp.data[1].values);\n        table.columns = [];\n        for(var i = 0, length = keys.length; i <= length; i++) {\n            if(keys[i]){\n                table.columns.push({'text' : keys[i]});\n            }\n        }\n        return keys;\n    }\n\n    buildSeries(target) {\n        let self = this;\n        var keys;\n        if(target.metric === 'select*'){\n            var table = new TableModel.default();\n            let rows = [];\n\n            return this.getTableData(target).then(resp => {\n                keys= this.buildCoulmns(resp, table);\n                return self.q.all(_.map(resp.data, branch => {\n                    let row = branch.values;\n                    rows.push(row);\n                }));\n            }).then(function(){;\n                _.forEach(rows, row => {\n                    var keys = Object.keys(row);\n                    var r = [];\n                    for (var i = 0; i < keys.length; i++) {\n                        var k = keys[i];\n                        r.push(row[k]);\n                    }\n                   table.rows.push(r);\n                });\n                return table;\n            });\n        }\n        return [];\n    }\n}\n\n\n"]}